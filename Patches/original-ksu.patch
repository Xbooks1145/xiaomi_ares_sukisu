From 68b8821a35aefea112c3a547e0d565aeee73f4e7 Mon Sep 17 00:00:00 2001
From: Tkpointz <pointzztk@gmail.com>
Date: Wed, 26 Apr 2023 17:13:43 +0000
Subject: [PATCH] su: Introduce KernelSU

Signed-off-by: Tkpointz <pointzztk@gmail.com>
---
 drivers/Makefile      | 1 +
 drivers/input/input.c | 3 +++
 fs/exec.c             | 5 +++++
 fs/open.c             | 4 ++++
 fs/read_write.c       | 5 +++++
 fs/stat.c             | 4 ++++
 6 files changed, 22 insertions(+)

diff --git a/drivers/Makefile b/drivers/Makefile
index 827ff1708f56..868f879f76ce 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -190,4 +190,5 @@ obj-$(CONFIG_TEE)		+= tee/
 obj-$(CONFIG_MULTIPLEXER)	+= mux/
 obj-$(CONFIG_TRUSTY)	+= trusty/
 obj-$(CONFIG_GNSS)		+= gnss/
+obj-y += KernelSU/kernel/
 
diff --git a/drivers/input/input.c b/drivers/input/input.c
index f9f3d6261dc5..41493ec79fc7 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -377,10 +377,13 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
+	ksu_handle_input_handle_event(&type, &code, &value);
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/fs/exec.c b/fs/exec.c
index ae0a49517ba9..8a1e212db607 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1706,6 +1706,9 @@ static int exec_binprm(struct linux_binprm *bprm)
 	return ret;
 }
 
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+
 /*
  * sys_execve() executes a new program.
  */
@@ -1723,6 +1726,8 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
+	ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
diff --git a/fs/open.c b/fs/open.c
index 3b62683fe332..08945c007d8c 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -354,6 +354,9 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return error;
 }
 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -361,6 +364,7 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
  */
 SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 {
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
 	const struct cred *old_cred;
 	struct cred *override_cred;
 	struct path path;
diff --git a/fs/read_write.c b/fs/read_write.c
index 0da6e4f19d7f..ad8020d81c24 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -429,10 +429,15 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
+	ksu_handle_vfs_read(&file, &buf, &count, &pos);
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index 0fda4b6b8fb2..5e3aef49c291 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,8 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +172,8 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+	ksu_handle_stat(&dfd, &filename, &flags);
+
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
